#!/usr/bin/python

import random
import string
import argparse
import subprocess

parser = argparse.ArgumentParser()

parser.add_argument('-r', '--remote', help='Hostname of the remote platform', default=None)
parser.add_argument('-g', '--gittarget', help='Name of git remote', default=None)
parser.add_argument('-d', '--directory', help='Path to AVRMusicTable on remote plaftorm', default=None)

def cmd_output(arr):
    try:
        res = subprocess.check_output(arr)
        print res
        return res
    except subprocess.CalledProcessError as e:
        print e.output
        raise e

def push_and_program(remote, gittarget, directory):
    is_committed = False
    is_tagged = False
    is_remote_tagged = False
    is_remote_checked_out = False

    try:
        tag_commit = ''.join(
            random.choice(
                string.ascii_uppercase + string.digits) for _ in range(15))
        print "Creating and pushing tag " + tag_commit + " to " + gittarget

        #Preparations
        status = cmd_output(['git', 'status'])
        if not 'working tree clean' in status:
            cmd_output(['git', 'add', '.'])

            cmd_output(['git', 'commit', '-m', tag_commit])
            is_committed = True

        cmd_output(['git', 'tag', tag_commit])
        is_tagged = True

        cmd_output(['git', 'push', gittarget, tag_commit])
        is_remote_tagged = True

        #Checking out and programming
        print "Checking out " + tag_commit + " on " + remote
        cmd_output(['ssh', remote,
                    'cd {} && git checkout {}'.format(directory, tag_commit)])

        print "Checking out submodules on " + remote
        cmd_output(['ssh', remote,
                    ('cd {} && '
                     'git submodule init ; '
                     'git submodule update ; '
                     'git submodule foreach --recursive git fetch origin ; '
                     'git submodule foreach --recursive git submodule init ;'
                     'git submodule foreach --recursive git submodule update'
                     ).format(directory)]
        )

        print "Programming mc on " + remote
        cmd_output(['ssh', remote,
                    'cd {} && make clean && make program || make program'.format(directory)])

    finally:
        print "Cleaning up!"
        #cleanup
        if is_remote_tagged:
            print "Deleting tag " + tag_commit + " on " + gittarget
            cmd_output(['git', 'push', gittarget, '--delete', tag_commit])
        if is_tagged: 
            print "Deleting tag " + tag_commit
            cmd_output(['git', 'tag', '-d', tag_commit])
        if is_committed:
            print "Resetting HEAD"
            cmd_output(['git', 'reset', 'HEAD~1'])

if __name__ == '__main__':
    arguments = parser.parse_args()
    if not arguments.gittarget or not arguments.remote and not arguments.directory:
        raise argparse.ArgumentError(None, 'Please provide all parameters.')

    push_and_program(arguments.remote, arguments.gittarget, arguments.directory)
